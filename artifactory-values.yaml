artifactory:
  artifactory:
    admin:
      dataKey: null
      ip: 127.0.0.1
      password: null
      secret: null
      username: admin
    affinity: {}
    annotations: {}
    binarystore:
      enabled: true
    catalinaLoggers: []
    catalinaLoggersResources: {}
    configMapName: null
    configMaps: ""
    consoleLog: false
    copyOnEveryStartup: null
    customCertificates:
      enabled: false
    customInitContainers: ""
    customInitContainersBegin: ""
    customPersistentPodVolumeClaim: {}
    customPersistentVolumeClaim: {}
    customSecrets: null
    customSidecarContainers: ""
    customVolumeMounts: ""
    customVolumes: ""
    database:
      maxOpenConnections: 80
    deleteDBPropertiesOnStartup: true
    externalArtifactoryPort: 8081
    externalPort: 8082
    extraEnvironmentVariables: null
    gid: 1030
    image:
      pullPolicy: IfNotPresent
      registry: releases-docker.jfrog.io
      repository: jfrog/artifactory-oss
    internalArtifactoryPort: 8081
    internalPort: 8082
    javaOpts:
      corePoolSize: 8
      jmx:
        accessFile: null
        authenticate: false
        enabled: false
        host: null
        passwordFile: null
        port: 9010
        ssl: false
    labels: {}
    license:
      dataKey: null
      licenseKey: null
      secret: null
    livenessProbe:
      enabled: true
      failureThreshold: 10
      initialDelaySeconds: 0
      path: /router/api/v1/system/health
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    loggers: []
    loggersResources: {}
    migration:
      enabled: true
      timeoutSeconds: 3600
    name: artifactory
    nodeSelector: {}
    openMetrics:
      enabled: false
    persistence:
      enabled: false
      size: 20Gi
      type: file-system
    service:
      annotations: {}
      loadBalancerSourceRanges: []
      name: artifactory
      type: ClusterIP
    setSecurityContext: true
  database:
    driver: null
    password: null
    secrets: {}
    type: null
    url: null
    user: null
  databaseUpgradeReady: "yes"
  frontend:
    session:
      timeoutMinutes: "30"
  global:
    customCertificates:
      enabled: false
    versions: {}
  hostAliases: []
  ingress:
    additionalRules: []
    annotations: {}
    artifactoryPath: /artifactory/
    defaultBackend:
      enabled: true
    enabled: false
    hosts: []
    labels: {}
    routerPath: /
    tls: null
  initContainerImage: releases-docker.jfrog.io/alpine:3.13.1
  initContainers:
    resources: {}
  installer:
    platform: art-oss-helm
    type: null
  installerInfo: '{"productId": "Helm_artifactory-oss/{{ .Chart.Version }}", "features":
    [ { "featureId": "Platform/{{ default "kubernetes" .Values.installer.platform
    }}"}]}'
  logger:
    image:
      registry: releases-docker.jfrog.io
      repository: busybox
      tag: 1.32.1
  metadata:
    database:
      maxOpenConnections: 80
  networkpolicy:
  - egress:
    - {}
    ingress:
    - {}
    name: artifactory
    podSelector:
      matchLabels:
        app: artifactory
  nginx:
    affinity: {}
    artifactoryConf: |
      {{- if .Values.nginx.https.enabled }}
      ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
      ssl_certificate  {{ .Values.nginx.persistence.mountPath }}/ssl/tls.crt;
      ssl_certificate_key  {{ .Values.nginx.persistence.mountPath }}/ssl/tls.key;
      ssl_session_cache shared:SSL:1m;
      ssl_prefer_server_ciphers   on;
      {{- end }}
      ## server configuration
      server {
      {{- if .Values.nginx.internalPortHttps }}
        listen {{ .Values.nginx.internalPortHttps }} ssl;
      {{- else -}}
        {{- if .Values.nginx.https.enabled }}
        listen {{ .Values.nginx.https.internalPort }} ssl;
        {{- end }}
      {{- end }}
      {{- if .Values.nginx.internalPortHttp }}
        listen {{ .Values.nginx.internalPortHttp }};
      {{- else -}}
        {{- if .Values.nginx.http.enabled }}
        listen {{ .Values.nginx.http.internalPort }};
        {{- end }}
      {{- end }}
        server_name ~(?<repo>.+)\.{{ include "artifactory.fullname" . }} {{ include "artifactory.fullname" . }}
        {{- range .Values.ingress.hosts -}}
          {{- if contains "." . -}}
            {{ "" | indent 0 }} ~(?<repo>.+)\.{{ . }}
          {{- end -}}
        {{- end -}};

        if ($http_x_forwarded_proto = '') {
          set $http_x_forwarded_proto  $scheme;
        }
        ## Application specific logs
        ## access_log /var/log/nginx/artifactory-access.log timing;
        ## error_log /var/log/nginx/artifactory-error.log;
        rewrite ^/artifactory/?$ / redirect;
        if ( $repo != "" ) {
          rewrite ^/(v1|v2)/(.*) /artifactory/api/docker/$repo/$1/$2 break;
        }
        chunked_transfer_encoding on;
        client_max_body_size 0;

        location / {
          proxy_read_timeout  900;
          proxy_pass_header   Server;
          proxy_cookie_path   ~*^/.* /;
          proxy_pass          {{ include "artifactory.scheme" . }}://{{ include "artifactory.fullname" . }}:{{ .Values.artifactory.externalPort }}/;
          {{- if .Values.nginx.service.ssloffload}}
          proxy_set_header    X-JFrog-Override-Base-Url $http_x_forwarded_proto://$host;
          {{- else }}
          proxy_set_header    X-JFrog-Override-Base-Url $http_x_forwarded_proto://$host:$server_port;
          proxy_set_header    X-Forwarded-Port  $server_port;
          {{- end }}
          proxy_set_header    X-Forwarded-Proto $http_x_forwarded_proto;
          proxy_set_header    Host              $http_host;
          proxy_set_header    X-Forwarded-For   $proxy_add_x_forwarded_for;
          add_header Strict-Transport-Security always;

          location /artifactory/ {
            if ( $request_uri ~ ^/artifactory/(.*)$ ) {
              proxy_pass       {{ include "artifactory.scheme" . }}://{{ include "artifactory.fullname" . }}:{{ .Values.artifactory.externalArtifactoryPort }}/artifactory/$1;
            }
            proxy_pass         {{ include "artifactory.scheme" . }}://{{ include "artifactory.fullname" . }}:{{ .Values.artifactory.externalArtifactoryPort }}/artifactory/;
          }
        }
      }
    customArtifactoryConfigMap: null
    customConfigMap: null
    enabled: true
    gid: 107
    http:
      enabled: true
      externalPort: 80
      internalPort: 80
    https:
      enabled: true
      externalPort: 443
      internalPort: 443
    image:
      pullPolicy: IfNotPresent
      registry: releases-docker.jfrog.io
      repository: jfrog/nginx-artifactory-pro
    kind: Deployment
    labels: {}
    livenessProbe:
      enabled: true
      failureThreshold: 10
      initialDelaySeconds: 0
      path: /router/api/v1/system/health
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    loggers: []
    loggersResources: {}
    logs:
      level: warn
      stderr: false
    mainConf: |
      # Main Nginx configuration file
      worker_processes  4;

      {{ if .Values.nginx.logs.stderr }}
      error_log  stderr {{ .Values.nginx.logs.level }};
      {{- else -}}
      error_log  {{ .Values.nginx.persistence.mountPath }}/logs/error.log {{ .Values.nginx.logs.level }};
      {{- end }}
      pid        /tmp/nginx.pid;

      {{- if .Values.artifactory.ssh.enabled }}
      ## SSH Server Configuration
      stream {
        server {
          listen {{ .Values.nginx.ssh.internalPort }};
          proxy_pass {{ include "artifactory.fullname" . }}:{{ .Values.artifactory.ssh.externalPort }};
        }
      }
      {{- end }}

      events {
        worker_connections  1024;
      }


      http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;

        variables_hash_max_size 1024;
        variables_hash_bucket_size 64;
        server_names_hash_max_size 4096;
        server_names_hash_bucket_size 128;
        types_hash_max_size 2048;
        types_hash_bucket_size 64;
        proxy_read_timeout 2400s;
        client_header_timeout 2400s;
        client_body_timeout 2400s;
        proxy_connect_timeout 75s;
        proxy_send_timeout 2400s;
        proxy_buffer_size 128k;
        proxy_buffers 40 128k;
        proxy_busy_buffers_size 128k;
        proxy_temp_file_write_size 250m;
        proxy_http_version 1.1;
        client_body_buffer_size 128k;

        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
        '$status $body_bytes_sent "$http_referer" '
        '"$http_user_agent" "$http_x_forwarded_for"';

        log_format timing 'ip = $remote_addr '
        'user = \"$remote_user\" '
        'local_time = \"$time_local\" '
        'host = $host '
        'request = \"$request\" '
        'status = $status '
        'bytes = $body_bytes_sent '
        'upstream = \"$upstream_addr\" '
        'upstream_time = $upstream_response_time '
        'request_time = $request_time '
        'referer = \"$http_referer\" '
        'UA = \"$http_user_agent\"';

        access_log  {{ .Values.nginx.persistence.mountPath }}/logs/access.log  timing;

        sendfile        on;
        #tcp_nopush     on;

        keepalive_timeout  65;

        #gzip  on;

        include /etc/nginx/conf.d/*.conf;

      }
    name: nginx
    nodeSelector: {}
    persistence:
      accessMode: ReadWriteOnce
      enabled: false
      mountPath: /var/opt/jfrog/nginx
      size: 5Gi
    priorityClassName: null
    readinessProbe:
      enabled: true
      failureThreshold: 10
      initialDelaySeconds: 0
      path: /router/api/v1/system/health
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    replicaCount: 1
    resources: {}
    service:
      annotations: {}
      externalTrafficPolicy: Cluster
      loadBalancerIP: null
      loadBalancerSourceRanges: []
      ssloffload: false
      type: LoadBalancer
    ssh:
      externalPort: 1339
      internalPort: 1339
    startupProbe:
      enabled: true
      failureThreshold: 60
      initialDelaySeconds: 30
      path: /router/api/v1/system/health
      periodSeconds: 5
      timeoutSeconds: 5
    tlsSecretName: ""
    tolerations: []
    uid: 104
postgresql:
  enabled: true
  persistence:
    enabled: false